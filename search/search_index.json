{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Watson Translator Workshop \u00b6 Objective \u00b6 IBM Watson\u2122 Language Translator allows you to translate text programmatically from one language into another language. This tutorial walks you through the various commands to translate text, to build custom dictionary in your specific domain and introduce Translator APIs. Lab 1 - Create Language Translator service instance \u00b6 You are going to need a Language Translator service instance before you can translate text from one language to anoother. Follow the instructions in the Create Language Translator service instance Lab 2 - Translation API Test Drive \u00b6 In this lab, you explore Translator APIs and perform text translation. Follow the instructions in the Translation API Test Drive Lab 3 - Translate Document \u00b6 In this lab, you explore document translation feature. Follow the instructions in the Translate Document Lab 4 - Build Force Glossary Custom Model \u00b6 In this lab, you build a Force Glossary custom model. Follow the instructions in the Build Force Glossary Custom Model Lab 5 - Build Parallel Corpus Custom Model \u00b6 In this lab, you build a Parallel Corpus customer model. Follow the instructions in the Build Parallel Corpus Custom Model Lab 6 - Calling Translator APIs in Sample Application \u00b6 In this lab, you build a Parallel Corpus customer model. Follow the instructions in the Calling Translator APIs in Sample Application Related Links \u00b6 There is lots of great information, tutorials, articles, etc on the IBM Developer site as well as broader web. Here are a subset of good examples related to data understanding, visualization and processing: Getting started with Language Translator IBM Cloud API Docs - Language Translator General Links \u00b6 IBM Developer","title":"About the workshop"},{"location":"#watson-translator-workshop","text":"","title":"Watson Translator Workshop"},{"location":"#objective","text":"IBM Watson\u2122 Language Translator allows you to translate text programmatically from one language into another language. This tutorial walks you through the various commands to translate text, to build custom dictionary in your specific domain and introduce Translator APIs.","title":"Objective"},{"location":"#lab-1-create-language-translator-service-instance","text":"You are going to need a Language Translator service instance before you can translate text from one language to anoother. Follow the instructions in the Create Language Translator service instance","title":"Lab 1 - Create Language Translator service instance"},{"location":"#lab-2-translation-api-test-drive","text":"In this lab, you explore Translator APIs and perform text translation. Follow the instructions in the Translation API Test Drive","title":"Lab 2 - Translation API Test Drive"},{"location":"#lab-3-translate-document","text":"In this lab, you explore document translation feature. Follow the instructions in the Translate Document","title":"Lab 3 - Translate Document"},{"location":"#lab-4-build-force-glossary-custom-model","text":"In this lab, you build a Force Glossary custom model. Follow the instructions in the Build Force Glossary Custom Model","title":"Lab 4 - Build Force Glossary Custom Model"},{"location":"#lab-5-build-parallel-corpus-custom-model","text":"In this lab, you build a Parallel Corpus customer model. Follow the instructions in the Build Parallel Corpus Custom Model","title":"Lab 5 - Build Parallel Corpus Custom Model"},{"location":"#lab-6-calling-translator-apis-in-sample-application","text":"In this lab, you build a Parallel Corpus customer model. Follow the instructions in the Calling Translator APIs in Sample Application","title":"Lab 6 - Calling Translator APIs in Sample Application"},{"location":"#related-links","text":"There is lots of great information, tutorials, articles, etc on the IBM Developer site as well as broader web. Here are a subset of good examples related to data understanding, visualization and processing: Getting started with Language Translator IBM Cloud API Docs - Language Translator","title":"Related Links"},{"location":"#general-links","text":"IBM Developer","title":"General Links"},{"location":"SUMMARY/","text":"Summary \u00b6 Getting Started \u00b6 Pre-work Watson Translator Labs \u00b6 Lab 1 - Create Language Translator service instance Lab 2 - Translation API Test Drive Lab 3 - Translate Document Lab 4 - Build Force Glossary Custom Model Lab 5 - Build Parallel Corpus Custom Model Resources \u00b6 Code Pattern: Calling Translator APIs in Sample Application IBM Developer","title":"Summary"},{"location":"SUMMARY/#summary","text":"","title":"Summary"},{"location":"SUMMARY/#getting-started","text":"Pre-work","title":"Getting Started"},{"location":"SUMMARY/#watson-translator-labs","text":"Lab 1 - Create Language Translator service instance Lab 2 - Translation API Test Drive Lab 3 - Translate Document Lab 4 - Build Force Glossary Custom Model Lab 5 - Build Parallel Corpus Custom Model","title":"Watson Translator Labs"},{"location":"SUMMARY/#resources","text":"Code Pattern: Calling Translator APIs in Sample Application IBM Developer","title":"Resources"},{"location":"pre-work/","text":"Pre-work \u00b6 This section is broken up into the following steps: Sign up for IBM Cloud Download or clone the repo 1. Sign up for IBM Cloud \u00b6 Ensure you have an IBM Cloud ID 2. Download or clone the repo \u00b6 Various parts of this workshop will require the attendee to upload files or run scripts that we've stored in the repository. So let's get that done early on, you'll need git on your laptop to clone the repository directly, or access to GitHub.com to download the zip file. To Download, go to the GitHub repo for this workshop and download the archived version of the workshop and extract it on your laptop. Alternately, run the following command: git clone https://github.com/IBM/watson-translator cd workshop-template","title":"Pre-work"},{"location":"pre-work/#pre-work","text":"This section is broken up into the following steps: Sign up for IBM Cloud Download or clone the repo","title":"Pre-work"},{"location":"pre-work/#1-sign-up-for-ibm-cloud","text":"Ensure you have an IBM Cloud ID","title":"1. Sign up for IBM Cloud"},{"location":"pre-work/#2-download-or-clone-the-repo","text":"Various parts of this workshop will require the attendee to upload files or run scripts that we've stored in the repository. So let's get that done early on, you'll need git on your laptop to clone the repository directly, or access to GitHub.com to download the zip file. To Download, go to the GitHub repo for this workshop and download the archived version of the workshop and extract it on your laptop. Alternately, run the following command: git clone https://github.com/IBM/watson-translator cd workshop-template","title":"2. Download or clone the repo"},{"location":"watson-translator-101/create-translator-instance/","text":"Create Language Translator Service Instance \u00b6 Objective \u00b6 IBM Watson\u2122 Language Translator allows you to translate text programmatically from one language into another language. You create an instance of IBM Watson\u2122 Language Translator service in IBM Cloud. Tools Used \u00b6 Watson Language Translator Requirements \u00b6 IBM Cloud Account Steps \u00b6 To create an instance of IBM Watson\u2122 Language Translator service in IBM Cloud, login to IBM Cloud . Select Catalog from the top navigation bar. Search for language translator . Select the Language Translator tile. Select a region, for example Dallas . Select an Advanced or Premium pricing plan. Note: Because, you are going to build a custom model with your dictionary, you must select an Advanced or Premium pricing plan. Give it a unique name, for example my-Language-Translator . Select Both public & prvate network for the Service Endpoints . Accept the default for the rest of settings. Click Create button. This create your Translator insstance. Setup a terminal environment connecting to Translator instance \u00b6 The rest of the workshop will use your Translator instance created in this section. For simplicity, you are going to connect to your Translator instance via Curl command in a terminal wiindow. To connect to your Translator instance, API key and Endpoint URL must be set correctly. Go back to the browser where you have created your Translator instance. Select Manage in the left navigation pane. Both API key and URL are available on the right. Copy the API key . Open a terminal window. Execute command export apikey = <your API key> Copy the URL . Execute command below in the terminal window. export url = <your url> To verify you are connected to an instance Translator service, execute the command curl --user \"apikey: $apikey \" \" $url /v3/models?source=en&target=es&version=2018-05-01\" It should return { \"models\" : [ { \"model_id\" : \"en-es\" , \"source\" : \"en\" , \"target\" : \"es\" , \"base_model_id\" : \"\" , \"domain\" : \"general\" , \"customizable\" : true , \"default_model\" : true , \"owner\" : \"\" , \"status\" : \"available\" , \"name\" : \"en-es\" , \"training_log\" : null } ] } If the expected result were not returned, reset both apikey and url environment variable. Related Links \u00b6 There is lots of great information, tutorials, articles, etc on the IBM Developer site as well as broader web. Here are a subset of good examples related to data understanding, visualization and processing: Getting started with Language Translator IBM Cloud API Docs - Language Translator General Links \u00b6 IBM Developer","title":"Lab 1. Create a Language Translator service"},{"location":"watson-translator-101/create-translator-instance/#create-language-translator-service-instance","text":"","title":"Create Language Translator Service Instance"},{"location":"watson-translator-101/create-translator-instance/#objective","text":"IBM Watson\u2122 Language Translator allows you to translate text programmatically from one language into another language. You create an instance of IBM Watson\u2122 Language Translator service in IBM Cloud.","title":"Objective"},{"location":"watson-translator-101/create-translator-instance/#tools-used","text":"Watson Language Translator","title":"Tools Used"},{"location":"watson-translator-101/create-translator-instance/#requirements","text":"IBM Cloud Account","title":"Requirements"},{"location":"watson-translator-101/create-translator-instance/#steps","text":"To create an instance of IBM Watson\u2122 Language Translator service in IBM Cloud, login to IBM Cloud . Select Catalog from the top navigation bar. Search for language translator . Select the Language Translator tile. Select a region, for example Dallas . Select an Advanced or Premium pricing plan. Note: Because, you are going to build a custom model with your dictionary, you must select an Advanced or Premium pricing plan. Give it a unique name, for example my-Language-Translator . Select Both public & prvate network for the Service Endpoints . Accept the default for the rest of settings. Click Create button. This create your Translator insstance.","title":"Steps"},{"location":"watson-translator-101/create-translator-instance/#setup-a-terminal-environment-connecting-to-translator-instance","text":"The rest of the workshop will use your Translator instance created in this section. For simplicity, you are going to connect to your Translator instance via Curl command in a terminal wiindow. To connect to your Translator instance, API key and Endpoint URL must be set correctly. Go back to the browser where you have created your Translator instance. Select Manage in the left navigation pane. Both API key and URL are available on the right. Copy the API key . Open a terminal window. Execute command export apikey = <your API key> Copy the URL . Execute command below in the terminal window. export url = <your url> To verify you are connected to an instance Translator service, execute the command curl --user \"apikey: $apikey \" \" $url /v3/models?source=en&target=es&version=2018-05-01\" It should return { \"models\" : [ { \"model_id\" : \"en-es\" , \"source\" : \"en\" , \"target\" : \"es\" , \"base_model_id\" : \"\" , \"domain\" : \"general\" , \"customizable\" : true , \"default_model\" : true , \"owner\" : \"\" , \"status\" : \"available\" , \"name\" : \"en-es\" , \"training_log\" : null } ] } If the expected result were not returned, reset both apikey and url environment variable.","title":"Setup a terminal environment connecting to Translator instance"},{"location":"watson-translator-101/create-translator-instance/#related-links","text":"There is lots of great information, tutorials, articles, etc on the IBM Developer site as well as broader web. Here are a subset of good examples related to data understanding, visualization and processing: Getting started with Language Translator IBM Cloud API Docs - Language Translator","title":"Related Links"},{"location":"watson-translator-101/create-translator-instance/#general-links","text":"IBM Developer","title":"General Links"},{"location":"watson-translator-101/force-glossary-model/","text":"Build Force Glossary Custom Model \u00b6 Overview \u00b6 Most of the provided translation models in Language Translator can be extended to learn custom terms and phrases or a general style that's derived from your translation data. The Language Translator service supports two types of customization requests. You can either customize a model with a forced glossary or with a corpus that contains parallel sentences. Use a forced glossary to force certain terms and phrases to be translated in a specific way. Use a parallel corpus when you want your custom model to learn from general translation patterns in your samples. What your model learns from a parallel corpus can improve translation results for input text that the model hasn't been trained on. The general improvements from parallel corpus customization are less predictable than the mandatory results you get from forced glossary customization. Use a forced glossary to set mandatory translations for specific terms and phrases. If you want specific control over translation behavior, use a forced glossary. Training data format: TMX (UTF-8 encoded) Maximum file size: 10 MB You can apply a forced glossary to a base model, or to a model that has been customized with a parallel corpus Limit one forced glossary per model Note: Forced glossary examples are sensitive to capitalization , so make sure that your training data reflects the capitalization of content that your application will encounter. Make sure that your Language Translator service instance is on an Advanced or Premium pricing plan. The Lite and Standard plans do not support customization. Objective \u00b6 IBM Watson\u2122 Language Translator allows you to translate text programmatically from one language into another language. You build a forced glossary custom model in this section. Tools Used \u00b6 Watson Language Translator Requirements \u00b6 IBM Cloud Account Creating TMX file \u00b6 To provide a glossary or corpus of terms for training the Language Translator service, create a valid UTF-8 encoded document that conforms to the Translation Memory Exchange (TMX) version 1.4 specification. TMX is an XML specification that is designed for machine-translation tools. Each term and translation pair must be enclosed in <tu> tags: <tu> <tuv xml:lang= \"en\" > <seg> patent </seg> </tuv> <tuv xml:lang= \"fr\" > <seg> brevet </seg> </tuv> </tu> The xml:lang attribute in the <tuv> tag identifies the language in which a term is expressed, while the <seg> tag contains the term or the translation. The Language Translator service uses only the <tu> , <tuv> , and <seg> elements. All other elements in the example are required to make a valid TMX file, or are informational, but are not used by the service. Sampe TMX file \u00b6 Below is a sample TMX file that can be used to create forced glossary custom model. It has three translation pairs. The first pair forces \"international business machines\" to be preserved in English during translation. This type of forced translation might be useful if you want to preserve improperly capitalized company names in informal communications. The second pair forces the model to always use \"brevet\" when translating \"patent\". The third pair shows that the forced glossary is forceful and you can even include Chinese in your en-es model. <?xml version=\"1.0\" encoding=\"UTF-8\"?> <tmx version= \"1.4\" > <header creationtool= \"\" creationtoolversion= \"\" segtype= \"phrase\" o-tmf= \"\" adminlang= \"en\" srclang= \"en\" datatype= \"PlainText\" o-encoding= \"UTF-8\" /> <body> <tu> <tuv xml:lang= \"en\" > <seg> international business machines </seg> </tuv> <tuv xml:lang= \"es\" > <seg> International Business Machines </seg> </tuv> </tu> <tu> <tuv xml:lang= \"en\" > <seg> patent </seg> </tuv> <tuv xml:lang= \"es\" > <seg> patentar </seg> </tuv> </tu> <tu> <tuv xml:lang= \"en\" > <seg> alley </seg> </tuv> <tuv xml:lang= \"es\" > <seg> \u80e1\u540c </seg> </tuv> </tu> </body> </tmx> Steps \u00b6 To build a forced glossary custom model, Go to the terminal window that you have configured in the previous section. The terminal window should have been ready for making API calls. If not, execute command export apikey = <your API key> export url = <your url> Identify if a specific model, for example en-es , supports customization, execute command curl --user \"apikey: $apikey \" \" $url /v3/models?source=en&target=es&version=2018-05-01\" It returns the following JSON data. \"customizable\" : true shows that the model supports customization. { \"models\" : [ { \"model_id\" : \"en-es\" , \"source\" : \"en\" , \"target\" : \"es\" , \"base_model_id\" : \"\" , \"domain\" : \"general\" , \"customizable\" : true , \"default_model\" : true , \"owner\" : \"\" , \"status\" : \"available\" , \"name\" : \"en-es\" , \"training_log\" : null } ] } Optionally, you may execute the command below and retrieve all models and verify their customization support. curl --user apikey: $apikey \" $url /v3/models?version=2018-05-01\" Create your training data. For this exercise, a TMX file en-es-ForcedGlossary.tmx is provided in the repo. Train your custom model. Use the Create model method to train your model. In your request, specify the model ID of a customizable base model, and training data in either the forced_glossary or parallel_corpus parameters. curl -X POST --user \"apikey: $apikey \" --form forced_glossary = @en-es-ForcedGlossary.tmx \" $url /v3/models?version=2018-05-01&base_model_id=en-es&name=custom-english-to-spanish\" The customizations in the file completely overwrite the domain translaton data, including high frequency or high confidence phrase translations. You can upload only one glossary with a file size less than 10 MB per call. A forced glossary should contain single words or short phrases. The command returns { \"model_id\" : \"a6c701aa-9c3e-4d08-ad7d-f8113e501608\" , \"source\" : \"en\" , \"target\" : \"es\" , \"base_model_id\" : \"en-es\" , \"domain\" : \"general\" , \"customizable\" : false , \"default_model\" : false , \"owner\" : \"1e5f399b-605d-4e83-b07e-534da85b86a9\" , \"status\" : \"dispatching\" , \"name\" : \"custom-english-to-spanish\" , \"training_log\" : null } The API response will contain details about your custom model, including its model_id . Record the model_id . export MODELID = <model_id> Check the status of the new custom model. Model training might take anywhere from a couple of minutes (for forced glossaries) to several hours (for large parallel corpora) depending on how much training data is involved. To check if your model is available, use the Get model details method and specify the model ID that you received in the service response of the previous step. Also, you can check the status of all of your models with the List models method. The following command gets information for the model identified by the model ID $MODELID . curl --user \"apikey: $apikey \" \" $url /v3/models/ $MODELID ?version=2018-05-01\" The status response attribute describes the state of the model in the training process: - uploading - uploaded - dispatching - queued - training - trained - publishing - available When the model status is available, your model is ready to use with your service instance. { \"model_id\" : \"a6c701aa-9c3e-4d08-ad7d-f8113e501608\" , \"source\" : \"en\" , \"target\" : \"es\" , \"base_model_id\" : \"en-es\" , \"domain\" : \"general\" , \"customizable\" : false , \"default_model\" : false , \"owner\" : \"1e5f399b-605d-4e83-b07e-534da85b86a9\" , \"status\" : \"available\" , \"name\" : \"custom-english-to-spanish\" , \"training_log\" : null } Translate text with your new custom model. To use your custom model, specify the text that you want to translate and the custom model's model ID in the Translate method. The following command translates text with the custom model identified by the model ID $MODELID . curl -X POST --user \"apikey: $apikey \" --header \"Content-Type: application/json\" --data \"{\\\"text\\\":\\\"Hello, Lee Zhang. Please don't park in the alley.\\\",\\\"model_id\\\":\\\" $MODELID \\\"}\" \" $url /v3/translate?version=2018-05-01\" It returns { \"translations\" : [ { \"translation\" : \"Hola, Lijing Zhang. Por favor, no estacione en el \u80e1\u540c.\" } ], \"word_count\" : 13 , \"character_count\" : 49 } Both Lee Zhang and alley were translated in the way that you defined in the TMX file. Translate text with the base model. curl -X POST --user \"apikey: $apikey \" --header \"Content-Type: application/json\" --data \"{\\\"text\\\":\\\"Hello, Lee Zhang. Please don't park in the alley.\\\",\\\"model_id\\\":\\\"en-es\\\"}\" \" $url /v3/translate?version=2018-05-01\" It returns { \"translations\" : [ { \"translation\" : \"Hola, Lee Zhang. Por favor, no estacione en el callej\u00f3n.\" } ], \"word_count\" : 13 , \"character_count\" : 49 } Compare the translation result of the custom model and the base model. The term alley and Lee Zhang were translated as we expected. Deleting a custom translation model. Don't run the command if you plan to use the custom model again . To delete a custom translation model, use the Delete model method. The following command deletes the translation model with model ID $MODELID . curl -X DELETE --user \"apikey: $apikey \" \" $url /v3/models/ $MODELID ?version=2018-05-01\" Related Links \u00b6 There is lots of great information, tutorials, articles, etc on the IBM Developer site as well as broader web. Here are a subset of good examples related to data understanding, visualization and processing: Getting started with Language Translator IBM Cloud API Docs - Language Translator General Links \u00b6 IBM Developer","title":"Lab 4. Build Force Glossary Custom Model"},{"location":"watson-translator-101/force-glossary-model/#build-force-glossary-custom-model","text":"","title":"Build Force Glossary Custom Model"},{"location":"watson-translator-101/force-glossary-model/#overview","text":"Most of the provided translation models in Language Translator can be extended to learn custom terms and phrases or a general style that's derived from your translation data. The Language Translator service supports two types of customization requests. You can either customize a model with a forced glossary or with a corpus that contains parallel sentences. Use a forced glossary to force certain terms and phrases to be translated in a specific way. Use a parallel corpus when you want your custom model to learn from general translation patterns in your samples. What your model learns from a parallel corpus can improve translation results for input text that the model hasn't been trained on. The general improvements from parallel corpus customization are less predictable than the mandatory results you get from forced glossary customization. Use a forced glossary to set mandatory translations for specific terms and phrases. If you want specific control over translation behavior, use a forced glossary. Training data format: TMX (UTF-8 encoded) Maximum file size: 10 MB You can apply a forced glossary to a base model, or to a model that has been customized with a parallel corpus Limit one forced glossary per model Note: Forced glossary examples are sensitive to capitalization , so make sure that your training data reflects the capitalization of content that your application will encounter. Make sure that your Language Translator service instance is on an Advanced or Premium pricing plan. The Lite and Standard plans do not support customization.","title":"Overview"},{"location":"watson-translator-101/force-glossary-model/#objective","text":"IBM Watson\u2122 Language Translator allows you to translate text programmatically from one language into another language. You build a forced glossary custom model in this section.","title":"Objective"},{"location":"watson-translator-101/force-glossary-model/#tools-used","text":"Watson Language Translator","title":"Tools Used"},{"location":"watson-translator-101/force-glossary-model/#requirements","text":"IBM Cloud Account","title":"Requirements"},{"location":"watson-translator-101/force-glossary-model/#creating-tmx-file","text":"To provide a glossary or corpus of terms for training the Language Translator service, create a valid UTF-8 encoded document that conforms to the Translation Memory Exchange (TMX) version 1.4 specification. TMX is an XML specification that is designed for machine-translation tools. Each term and translation pair must be enclosed in <tu> tags: <tu> <tuv xml:lang= \"en\" > <seg> patent </seg> </tuv> <tuv xml:lang= \"fr\" > <seg> brevet </seg> </tuv> </tu> The xml:lang attribute in the <tuv> tag identifies the language in which a term is expressed, while the <seg> tag contains the term or the translation. The Language Translator service uses only the <tu> , <tuv> , and <seg> elements. All other elements in the example are required to make a valid TMX file, or are informational, but are not used by the service.","title":"Creating TMX file"},{"location":"watson-translator-101/force-glossary-model/#sampe-tmx-file","text":"Below is a sample TMX file that can be used to create forced glossary custom model. It has three translation pairs. The first pair forces \"international business machines\" to be preserved in English during translation. This type of forced translation might be useful if you want to preserve improperly capitalized company names in informal communications. The second pair forces the model to always use \"brevet\" when translating \"patent\". The third pair shows that the forced glossary is forceful and you can even include Chinese in your en-es model. <?xml version=\"1.0\" encoding=\"UTF-8\"?> <tmx version= \"1.4\" > <header creationtool= \"\" creationtoolversion= \"\" segtype= \"phrase\" o-tmf= \"\" adminlang= \"en\" srclang= \"en\" datatype= \"PlainText\" o-encoding= \"UTF-8\" /> <body> <tu> <tuv xml:lang= \"en\" > <seg> international business machines </seg> </tuv> <tuv xml:lang= \"es\" > <seg> International Business Machines </seg> </tuv> </tu> <tu> <tuv xml:lang= \"en\" > <seg> patent </seg> </tuv> <tuv xml:lang= \"es\" > <seg> patentar </seg> </tuv> </tu> <tu> <tuv xml:lang= \"en\" > <seg> alley </seg> </tuv> <tuv xml:lang= \"es\" > <seg> \u80e1\u540c </seg> </tuv> </tu> </body> </tmx>","title":"Sampe TMX file"},{"location":"watson-translator-101/force-glossary-model/#steps","text":"To build a forced glossary custom model, Go to the terminal window that you have configured in the previous section. The terminal window should have been ready for making API calls. If not, execute command export apikey = <your API key> export url = <your url> Identify if a specific model, for example en-es , supports customization, execute command curl --user \"apikey: $apikey \" \" $url /v3/models?source=en&target=es&version=2018-05-01\" It returns the following JSON data. \"customizable\" : true shows that the model supports customization. { \"models\" : [ { \"model_id\" : \"en-es\" , \"source\" : \"en\" , \"target\" : \"es\" , \"base_model_id\" : \"\" , \"domain\" : \"general\" , \"customizable\" : true , \"default_model\" : true , \"owner\" : \"\" , \"status\" : \"available\" , \"name\" : \"en-es\" , \"training_log\" : null } ] } Optionally, you may execute the command below and retrieve all models and verify their customization support. curl --user apikey: $apikey \" $url /v3/models?version=2018-05-01\" Create your training data. For this exercise, a TMX file en-es-ForcedGlossary.tmx is provided in the repo. Train your custom model. Use the Create model method to train your model. In your request, specify the model ID of a customizable base model, and training data in either the forced_glossary or parallel_corpus parameters. curl -X POST --user \"apikey: $apikey \" --form forced_glossary = @en-es-ForcedGlossary.tmx \" $url /v3/models?version=2018-05-01&base_model_id=en-es&name=custom-english-to-spanish\" The customizations in the file completely overwrite the domain translaton data, including high frequency or high confidence phrase translations. You can upload only one glossary with a file size less than 10 MB per call. A forced glossary should contain single words or short phrases. The command returns { \"model_id\" : \"a6c701aa-9c3e-4d08-ad7d-f8113e501608\" , \"source\" : \"en\" , \"target\" : \"es\" , \"base_model_id\" : \"en-es\" , \"domain\" : \"general\" , \"customizable\" : false , \"default_model\" : false , \"owner\" : \"1e5f399b-605d-4e83-b07e-534da85b86a9\" , \"status\" : \"dispatching\" , \"name\" : \"custom-english-to-spanish\" , \"training_log\" : null } The API response will contain details about your custom model, including its model_id . Record the model_id . export MODELID = <model_id> Check the status of the new custom model. Model training might take anywhere from a couple of minutes (for forced glossaries) to several hours (for large parallel corpora) depending on how much training data is involved. To check if your model is available, use the Get model details method and specify the model ID that you received in the service response of the previous step. Also, you can check the status of all of your models with the List models method. The following command gets information for the model identified by the model ID $MODELID . curl --user \"apikey: $apikey \" \" $url /v3/models/ $MODELID ?version=2018-05-01\" The status response attribute describes the state of the model in the training process: - uploading - uploaded - dispatching - queued - training - trained - publishing - available When the model status is available, your model is ready to use with your service instance. { \"model_id\" : \"a6c701aa-9c3e-4d08-ad7d-f8113e501608\" , \"source\" : \"en\" , \"target\" : \"es\" , \"base_model_id\" : \"en-es\" , \"domain\" : \"general\" , \"customizable\" : false , \"default_model\" : false , \"owner\" : \"1e5f399b-605d-4e83-b07e-534da85b86a9\" , \"status\" : \"available\" , \"name\" : \"custom-english-to-spanish\" , \"training_log\" : null } Translate text with your new custom model. To use your custom model, specify the text that you want to translate and the custom model's model ID in the Translate method. The following command translates text with the custom model identified by the model ID $MODELID . curl -X POST --user \"apikey: $apikey \" --header \"Content-Type: application/json\" --data \"{\\\"text\\\":\\\"Hello, Lee Zhang. Please don't park in the alley.\\\",\\\"model_id\\\":\\\" $MODELID \\\"}\" \" $url /v3/translate?version=2018-05-01\" It returns { \"translations\" : [ { \"translation\" : \"Hola, Lijing Zhang. Por favor, no estacione en el \u80e1\u540c.\" } ], \"word_count\" : 13 , \"character_count\" : 49 } Both Lee Zhang and alley were translated in the way that you defined in the TMX file. Translate text with the base model. curl -X POST --user \"apikey: $apikey \" --header \"Content-Type: application/json\" --data \"{\\\"text\\\":\\\"Hello, Lee Zhang. Please don't park in the alley.\\\",\\\"model_id\\\":\\\"en-es\\\"}\" \" $url /v3/translate?version=2018-05-01\" It returns { \"translations\" : [ { \"translation\" : \"Hola, Lee Zhang. Por favor, no estacione en el callej\u00f3n.\" } ], \"word_count\" : 13 , \"character_count\" : 49 } Compare the translation result of the custom model and the base model. The term alley and Lee Zhang were translated as we expected. Deleting a custom translation model. Don't run the command if you plan to use the custom model again . To delete a custom translation model, use the Delete model method. The following command deletes the translation model with model ID $MODELID . curl -X DELETE --user \"apikey: $apikey \" \" $url /v3/models/ $MODELID ?version=2018-05-01\"","title":"Steps"},{"location":"watson-translator-101/force-glossary-model/#related-links","text":"There is lots of great information, tutorials, articles, etc on the IBM Developer site as well as broader web. Here are a subset of good examples related to data understanding, visualization and processing: Getting started with Language Translator IBM Cloud API Docs - Language Translator","title":"Related Links"},{"location":"watson-translator-101/force-glossary-model/#general-links","text":"IBM Developer","title":"General Links"},{"location":"watson-translator-101/parallel-corpus-model/","text":"Build Parallel Corpus Custom Model \u00b6 Overview \u00b6 Most of the provided translation models in Language Translator can be extended to learn custom terms and phrases or a general style that's derived from your translation data. The Language Translator service supports two types of customization requests. You can either customize a model with a forced glossary or with a corpus that contains parallel sentences. Use a forced glossary to force certain terms and phrases to be translated in a specific way. Use a parallel corpus when you want your custom model to learn from general translation patterns in your samples. What your model learns from a parallel corpus can improve translation results for input text that the model hasn't been trained on. The general improvements from parallel corpus customization are less predictable than the mandatory results you get from forced glossary customization. Use a parallel corpus to provide additional translations for the base model to learn from. This helps to adapt the base model to a specific domain. How the resulting custom model translates text depends on the model's combined understanding of the parallel corpus and the base model. Training data format: TMX (UTF-8 encoded) Maximum length of translation pairs: 80 source words Minimum number of translation pairs: 5,000 Maximum file size: 250 MB You can submit multiple parallel corpus files by repeating the parallel_corpus multipart form parameter as long as the cumulative size of the files doesn't exceed 250 MB. Note, Make sure that your Language Translator service instance is on an Advanced or Premium pricing plan. The Lite and Standard plans do not support customization. Objective \u00b6 IBM Watson\u2122 Language Translator allows you to translate text programmatically from one language into another language. You build a parallel corpus custom model in this section. Tools Used \u00b6 Watson Language Translator Requirements \u00b6 IBM Cloud Account Creating TMX file \u00b6 To provide a glossary or corpus of terms for training the Language Translator service, create a valid UTF-8 encoded document that conforms to the Translation Memory Exchange (TMX) version 1.4 specification. TMX is an XML specification that is designed for machine-translation tools. Each term and translation pair must be enclosed in <tu> tags: <tu> <tuv xml:lang= \"en\" > <seg> patent </seg> </tuv> <tuv xml:lang= \"fr\" > <seg> brevet </seg> </tuv> </tu> The xml:lang attribute in the <tuv> tag identifies the language in which a term is expressed, while the <seg> tag contains the term or the translation. The Language Translator service uses only the <tu> , <tuv> , and <seg> elements. All other elements in the example are required to make a valid TMX file, or are informational, but are not used by the service. Sampe TMX file \u00b6 The following is a small piece of an English to French parallel corpus that was downloaded from the MultiUN collection available on the OPUS open parallel corpus website. You can download a compressed version of the entire TMX file. <?xml version=\"1.0\" encoding=\"UTF-8\" ?> <tmx version= \"1.4\" > <header creationdate= \"Tue Jan 29 12:49:40 2013\" srclang= \"en\" adminlang= \"en\" o-tmf= \"unknown\" segtype= \"sentence\" creationtool= \"Uplug\" creationtoolversion= \"unknown\" datatype= \"PlainText\" /> <body> <tu> <tuv xml:lang= \"en\" ><seg> RESOLUTION 55/100 </seg></tuv> <tuv xml:lang= \"fr\" ><seg> R\u00c9SOLUTION 55/100 </seg></tuv> </tu> <tu> <tuv xml:lang= \"en\" ><seg> Adopted at the 81st plenary meeting, on 4 December 2000, on the recommendation of the Committee (A/55/602/Add.2 and Corr.1, para. 94),The draft resolution recommended in the report was sponsored in the Committee by: Bolivia, Cuba, El Salvador, Ghana and Honduras. by a recorded vote of 106 to 1, with 67 abstentions, as follows: </seg></tuv> <tuv xml:lang= \"fr\" ><seg> Adopt\u00e9e \u00e0 la 81e s\u00e9ance pl\u00e9ni\u00e8re, le 4 d\u00e9cembre 2000, sur la recommandation de la Commission (A/55/602/Add.2, par. 94)Le projet de r\u00e9solution recommand\u00e9 dans le rapport de la Commission avait pour auteurs les pays suivants: Bolivie, Cuba, El Salvador, Ghana et Honduras., par 106 voix contre une, avec 67 abstentions, \u00e0 la suite d'un vote enregistr\u00e9, les voix s'\u00e9tant r\u00e9parties comme suit: </seg></tuv> </tu> ... Steps \u00b6 To build a parallel corpus custom model, Go to the terminal window that you have configured in the previous section. The terminal window should have been ready for making API calls. If not, execute command export apikey = <your API key> export url = <your url> Identify if a specific model, for example en-fr , supports customization, execute command curl --user \"apikey: $apikey \" \" $url /v3/models?source=en&target=fr&version=2018-05-01\" It returns the following JSON data. \"customizable\" : true shows that the model supports customization. { \"models\" : [ { \"model_id\" : \"en-fr\" , \"source\" : \"en\" , \"target\" : \"fr\" , \"base_model_id\" : \"\" , \"domain\" : \"general\" , \"customizable\" : true , \"default_model\" : true , \"owner\" : \"\" , \"status\" : \"available\" , \"name\" : \"en-fr\" , \"training_log\" : null } ] } Optionally, you may execute the command below and retrieve all models for customization support. curl --user apikey: $apikey \" $url /v3/models?version=2018-05-01\" Create your training data. For this exercise, a TMX file en-fr-6000-ParallelCorpus.tmx is provided in the repo. Train your custom model. Use the Create model method to train your model. In your request, specify the model ID of a customizable base model, and training data in the parallel_corpus parameters. curl -X POST --user \"apikey: $apikey \" --form parallel_corpus = @en-fr-6000-ParallelCorpus.tmx \" $url /v3/models?version=2018-05-01&base_model_id=en-fr&name=custom-english-to-french\" You can upload multiple parallel_corpus files in one request. All uploaded parallel_corpus files combined, your parallel corpus must contain at least 5,000 parallel sentences to train successfully. The command returns { \"model_id\" : \"43745eda-7fde-4998-a62a-26cf0e795973\" , \"source\" : \"en\" , \"target\" : \"fr\" , \"base_model_id\" : \"en-fr\" , \"domain\" : \"general\" , \"customizable\" : true , \"default_model\" : false , \"owner\" : \"1e5f399b-605d-4e83-b07e-534da85b86a9\" , \"status\" : \"dispatching\" , \"name\" : \"custom-english-to-french\" , \"training_log\" : null } The API response will contain details about your custom model, including its model ID. Record the model_id . export MODELID = <model_id> Check the status of the new custom model. Model training might take anywhere from a couple of minutes (for forced glossaries) to several hours (for large parallel corpora) depending on how much training data is involved. To see if your model is available, use the Get model details method and specify the model ID that you received in the service response of the previous step. Also, you can check the status of all of your models with the List models method. The following command gets information for the model identified by the model ID $MODELID . curl --user \"apikey: $apikey \" \" $url /v3/models/ $MODELID ?version=2018-05-01\" It returns { \"model_id\" : \"43745eda-7fde-4998-a62a-26cf0e795973\" , \"source\" : \"en\" , \"target\" : \"fr\" , \"base_model_id\" : \"en-fr\" , \"domain\" : \"general\" , \"customizable\" : true , \"default_model\" : false , \"owner\" : \"1e5f399b-605d-4e83-b07e-534da85b86a9\" , \"status\" : \"training\" , \"name\" : \"custom-english-to-french\" , \"training_log\" : null } The status response attribute describes the state of the model in the training process: - uploading - uploaded - dispatching - queued - training - trained - publishing - available When the model status is available, your model is ready to use with your service instance. { \"model_id\" : \"43745eda-7fde-4998-a62a-26cf0e795973\" , \"source\" : \"en\" , \"target\" : \"fr\" , \"base_model_id\" : \"en-fr\" , \"domain\" : \"general\" , \"customizable\" : true , \"default_model\" : false , \"owner\" : \"1e5f399b-605d-4e83-b07e-534da85b86a9\" , \"status\" : \"available\" , \"name\" : \"custom-english-to-french\" , \"training_log\" : null } Translate text with your new custom model. To use your custom model, specify the text that you want to translate and the custom model's model ID in the Translate method. The following command translates text with the custom model identified by the model ID $MODELID . curl -X POST --user \"apikey: $apikey \" --header \"Content-Type: application/json\" --data \"{\\\"text\\\":\\\"Hello, Lee Zhang. Please don't park in the alley.\\\",\\\"model_id\\\":\\\" $MODELID \\\"}\" \" $url /v3/translate?version=2018-05-01\" It returns { \"translations\" : [ { \"translation\" : \"Bonjour, Lee Zhang. Veuillez ne pas vous garer dans l'all\u00e9e.\" } ], \"word_count\" : 13 , \"character_count\" : 49 } Neither Lee Zhang nor alley were translated in the way that you defined in the TMX file en-fr-6000-ParallelCorpus.tmx . Use a parallel corpus when you want your custom model to learn from general translation patterns in your sample TMX file. What your model learns from a parallel corpus can improve translation results for input text that the model hasn't been trained on. However, the general improvements from parallel corpus customization are less predictable than the mandatory results you get from forced glossary customization. You can apply a forced glossary to a model that has been customized with a parallel corpus. curl -X POST --user \"apikey: $apikey \" --form forced_glossary = @en-fr-ForcedGlossary.tmx \" $url /v3/models?version=2018-05-01&base_model_id= $MODELID &name=custom-english-to-french-2\" The command returns { \"model_id\" : \"6277bffd-f884-4c5c-9825-ac41136f1b69\" , \"source\" : \"en\" , \"target\" : \"fr\" , \"base_model_id\" : \"43745eda-7fde-4998-a62a-26cf0e795973\" , \"domain\" : \"general\" , \"customizable\" : false , \"default_model\" : false , \"owner\" : \"1e5f399b-605d-4e83-b07e-534da85b86a9\" , \"status\" : \"dispatching\" , \"name\" : \"custom-english-to-french-2\" , \"training_log\" : null } The API response will contain details about your custom model, including its model ID. Record the new model ID. export MODELID2 = <new model ID> Check the status of the new custom model. The following command gets information for the model identified by the model ID $MODELID2 . curl --user \"apikey: $apikey \" \" $url /v3/models/ $MODELID2 ?version=2018-05-01\" When the model status is available, your model is ready to use with your service instance. { \"model_id\" : \"6277bffd-f884-4c5c-9825-ac41136f1b69\" , \"source\" : \"en\" , \"target\" : \"fr\" , \"base_model_id\" : \"43745eda-7fde-4998-a62a-26cf0e795973\" , \"domain\" : \"general\" , \"customizable\" : false , \"default_model\" : false , \"owner\" : \"1e5f399b-605d-4e83-b07e-534da85b86a9\" , \"status\" : \"available\" , \"name\" : \"custom-english-to-french-2\" , \"training_log\" : null } Translate text with your new custom model. To use your custom model, specify the text that you want to translate and the custom model's model ID in the Translate method. The following command translates text with the custom model identified by the model ID MODELID2 . curl -X POST --user \"apikey: $apikey \" --header \"Content-Type: application/json\" --data \"{\\\"text\\\":\\\"Hello, Lee Zhang. Please don't park in the alley.\\\",\\\"model_id\\\":\\\" $MODELID2 \\\"}\" \" $url /v3/translate?version=2018-05-01\" It returns { \"translations\" : [ { \"translation\" : \"Bonjour, Lijing Zhang. Veuillez ne pas vous garer dans l'\u80e1\u540c.\" } ], \"word_count\" : 13 , \"character_count\" : 49 } This time, both Lee Zhang and alley were translated in the way that you defined in the TMX file en-fr-ForcedGlossary.tmx . Note: the sentence was translated to Bonjour, Lee Zhang. Veuillez ne pas vous garer dans l'all\u00e9e. last time. Deleting a custom translation model. Don't run the command if you plan to use the custom model again . To delete a custom translation model, use the Delete model method. The following command deletes the translation model with the model ID $MODELID2 & $MODELID . curl -X DELETE --user \"apikey: $apikey \" \" $url /v3/models/ $MODELID ?version=2018-05-01\" curl -X DELETE --user \"apikey: $apikey \" \" $url /v3/models/ $MODELID2 ?version=2018-05-01\" Related Links \u00b6 There is lots of great information, tutorials, articles, etc on the IBM Developer site as well as broader web. Here are a subset of good examples related to data understanding, visualization and processing: Getting started with Language Translator IBM Cloud API Docs - Language Translator General Links \u00b6 IBM Developer","title":"Lab 5. Build Parallel Corpus Custom Model"},{"location":"watson-translator-101/parallel-corpus-model/#build-parallel-corpus-custom-model","text":"","title":"Build Parallel Corpus Custom Model"},{"location":"watson-translator-101/parallel-corpus-model/#overview","text":"Most of the provided translation models in Language Translator can be extended to learn custom terms and phrases or a general style that's derived from your translation data. The Language Translator service supports two types of customization requests. You can either customize a model with a forced glossary or with a corpus that contains parallel sentences. Use a forced glossary to force certain terms and phrases to be translated in a specific way. Use a parallel corpus when you want your custom model to learn from general translation patterns in your samples. What your model learns from a parallel corpus can improve translation results for input text that the model hasn't been trained on. The general improvements from parallel corpus customization are less predictable than the mandatory results you get from forced glossary customization. Use a parallel corpus to provide additional translations for the base model to learn from. This helps to adapt the base model to a specific domain. How the resulting custom model translates text depends on the model's combined understanding of the parallel corpus and the base model. Training data format: TMX (UTF-8 encoded) Maximum length of translation pairs: 80 source words Minimum number of translation pairs: 5,000 Maximum file size: 250 MB You can submit multiple parallel corpus files by repeating the parallel_corpus multipart form parameter as long as the cumulative size of the files doesn't exceed 250 MB. Note, Make sure that your Language Translator service instance is on an Advanced or Premium pricing plan. The Lite and Standard plans do not support customization.","title":"Overview"},{"location":"watson-translator-101/parallel-corpus-model/#objective","text":"IBM Watson\u2122 Language Translator allows you to translate text programmatically from one language into another language. You build a parallel corpus custom model in this section.","title":"Objective"},{"location":"watson-translator-101/parallel-corpus-model/#tools-used","text":"Watson Language Translator","title":"Tools Used"},{"location":"watson-translator-101/parallel-corpus-model/#requirements","text":"IBM Cloud Account","title":"Requirements"},{"location":"watson-translator-101/parallel-corpus-model/#creating-tmx-file","text":"To provide a glossary or corpus of terms for training the Language Translator service, create a valid UTF-8 encoded document that conforms to the Translation Memory Exchange (TMX) version 1.4 specification. TMX is an XML specification that is designed for machine-translation tools. Each term and translation pair must be enclosed in <tu> tags: <tu> <tuv xml:lang= \"en\" > <seg> patent </seg> </tuv> <tuv xml:lang= \"fr\" > <seg> brevet </seg> </tuv> </tu> The xml:lang attribute in the <tuv> tag identifies the language in which a term is expressed, while the <seg> tag contains the term or the translation. The Language Translator service uses only the <tu> , <tuv> , and <seg> elements. All other elements in the example are required to make a valid TMX file, or are informational, but are not used by the service.","title":"Creating TMX file"},{"location":"watson-translator-101/parallel-corpus-model/#sampe-tmx-file","text":"The following is a small piece of an English to French parallel corpus that was downloaded from the MultiUN collection available on the OPUS open parallel corpus website. You can download a compressed version of the entire TMX file. <?xml version=\"1.0\" encoding=\"UTF-8\" ?> <tmx version= \"1.4\" > <header creationdate= \"Tue Jan 29 12:49:40 2013\" srclang= \"en\" adminlang= \"en\" o-tmf= \"unknown\" segtype= \"sentence\" creationtool= \"Uplug\" creationtoolversion= \"unknown\" datatype= \"PlainText\" /> <body> <tu> <tuv xml:lang= \"en\" ><seg> RESOLUTION 55/100 </seg></tuv> <tuv xml:lang= \"fr\" ><seg> R\u00c9SOLUTION 55/100 </seg></tuv> </tu> <tu> <tuv xml:lang= \"en\" ><seg> Adopted at the 81st plenary meeting, on 4 December 2000, on the recommendation of the Committee (A/55/602/Add.2 and Corr.1, para. 94),The draft resolution recommended in the report was sponsored in the Committee by: Bolivia, Cuba, El Salvador, Ghana and Honduras. by a recorded vote of 106 to 1, with 67 abstentions, as follows: </seg></tuv> <tuv xml:lang= \"fr\" ><seg> Adopt\u00e9e \u00e0 la 81e s\u00e9ance pl\u00e9ni\u00e8re, le 4 d\u00e9cembre 2000, sur la recommandation de la Commission (A/55/602/Add.2, par. 94)Le projet de r\u00e9solution recommand\u00e9 dans le rapport de la Commission avait pour auteurs les pays suivants: Bolivie, Cuba, El Salvador, Ghana et Honduras., par 106 voix contre une, avec 67 abstentions, \u00e0 la suite d'un vote enregistr\u00e9, les voix s'\u00e9tant r\u00e9parties comme suit: </seg></tuv> </tu> ...","title":"Sampe TMX file"},{"location":"watson-translator-101/parallel-corpus-model/#steps","text":"To build a parallel corpus custom model, Go to the terminal window that you have configured in the previous section. The terminal window should have been ready for making API calls. If not, execute command export apikey = <your API key> export url = <your url> Identify if a specific model, for example en-fr , supports customization, execute command curl --user \"apikey: $apikey \" \" $url /v3/models?source=en&target=fr&version=2018-05-01\" It returns the following JSON data. \"customizable\" : true shows that the model supports customization. { \"models\" : [ { \"model_id\" : \"en-fr\" , \"source\" : \"en\" , \"target\" : \"fr\" , \"base_model_id\" : \"\" , \"domain\" : \"general\" , \"customizable\" : true , \"default_model\" : true , \"owner\" : \"\" , \"status\" : \"available\" , \"name\" : \"en-fr\" , \"training_log\" : null } ] } Optionally, you may execute the command below and retrieve all models for customization support. curl --user apikey: $apikey \" $url /v3/models?version=2018-05-01\" Create your training data. For this exercise, a TMX file en-fr-6000-ParallelCorpus.tmx is provided in the repo. Train your custom model. Use the Create model method to train your model. In your request, specify the model ID of a customizable base model, and training data in the parallel_corpus parameters. curl -X POST --user \"apikey: $apikey \" --form parallel_corpus = @en-fr-6000-ParallelCorpus.tmx \" $url /v3/models?version=2018-05-01&base_model_id=en-fr&name=custom-english-to-french\" You can upload multiple parallel_corpus files in one request. All uploaded parallel_corpus files combined, your parallel corpus must contain at least 5,000 parallel sentences to train successfully. The command returns { \"model_id\" : \"43745eda-7fde-4998-a62a-26cf0e795973\" , \"source\" : \"en\" , \"target\" : \"fr\" , \"base_model_id\" : \"en-fr\" , \"domain\" : \"general\" , \"customizable\" : true , \"default_model\" : false , \"owner\" : \"1e5f399b-605d-4e83-b07e-534da85b86a9\" , \"status\" : \"dispatching\" , \"name\" : \"custom-english-to-french\" , \"training_log\" : null } The API response will contain details about your custom model, including its model ID. Record the model_id . export MODELID = <model_id> Check the status of the new custom model. Model training might take anywhere from a couple of minutes (for forced glossaries) to several hours (for large parallel corpora) depending on how much training data is involved. To see if your model is available, use the Get model details method and specify the model ID that you received in the service response of the previous step. Also, you can check the status of all of your models with the List models method. The following command gets information for the model identified by the model ID $MODELID . curl --user \"apikey: $apikey \" \" $url /v3/models/ $MODELID ?version=2018-05-01\" It returns { \"model_id\" : \"43745eda-7fde-4998-a62a-26cf0e795973\" , \"source\" : \"en\" , \"target\" : \"fr\" , \"base_model_id\" : \"en-fr\" , \"domain\" : \"general\" , \"customizable\" : true , \"default_model\" : false , \"owner\" : \"1e5f399b-605d-4e83-b07e-534da85b86a9\" , \"status\" : \"training\" , \"name\" : \"custom-english-to-french\" , \"training_log\" : null } The status response attribute describes the state of the model in the training process: - uploading - uploaded - dispatching - queued - training - trained - publishing - available When the model status is available, your model is ready to use with your service instance. { \"model_id\" : \"43745eda-7fde-4998-a62a-26cf0e795973\" , \"source\" : \"en\" , \"target\" : \"fr\" , \"base_model_id\" : \"en-fr\" , \"domain\" : \"general\" , \"customizable\" : true , \"default_model\" : false , \"owner\" : \"1e5f399b-605d-4e83-b07e-534da85b86a9\" , \"status\" : \"available\" , \"name\" : \"custom-english-to-french\" , \"training_log\" : null } Translate text with your new custom model. To use your custom model, specify the text that you want to translate and the custom model's model ID in the Translate method. The following command translates text with the custom model identified by the model ID $MODELID . curl -X POST --user \"apikey: $apikey \" --header \"Content-Type: application/json\" --data \"{\\\"text\\\":\\\"Hello, Lee Zhang. Please don't park in the alley.\\\",\\\"model_id\\\":\\\" $MODELID \\\"}\" \" $url /v3/translate?version=2018-05-01\" It returns { \"translations\" : [ { \"translation\" : \"Bonjour, Lee Zhang. Veuillez ne pas vous garer dans l'all\u00e9e.\" } ], \"word_count\" : 13 , \"character_count\" : 49 } Neither Lee Zhang nor alley were translated in the way that you defined in the TMX file en-fr-6000-ParallelCorpus.tmx . Use a parallel corpus when you want your custom model to learn from general translation patterns in your sample TMX file. What your model learns from a parallel corpus can improve translation results for input text that the model hasn't been trained on. However, the general improvements from parallel corpus customization are less predictable than the mandatory results you get from forced glossary customization. You can apply a forced glossary to a model that has been customized with a parallel corpus. curl -X POST --user \"apikey: $apikey \" --form forced_glossary = @en-fr-ForcedGlossary.tmx \" $url /v3/models?version=2018-05-01&base_model_id= $MODELID &name=custom-english-to-french-2\" The command returns { \"model_id\" : \"6277bffd-f884-4c5c-9825-ac41136f1b69\" , \"source\" : \"en\" , \"target\" : \"fr\" , \"base_model_id\" : \"43745eda-7fde-4998-a62a-26cf0e795973\" , \"domain\" : \"general\" , \"customizable\" : false , \"default_model\" : false , \"owner\" : \"1e5f399b-605d-4e83-b07e-534da85b86a9\" , \"status\" : \"dispatching\" , \"name\" : \"custom-english-to-french-2\" , \"training_log\" : null } The API response will contain details about your custom model, including its model ID. Record the new model ID. export MODELID2 = <new model ID> Check the status of the new custom model. The following command gets information for the model identified by the model ID $MODELID2 . curl --user \"apikey: $apikey \" \" $url /v3/models/ $MODELID2 ?version=2018-05-01\" When the model status is available, your model is ready to use with your service instance. { \"model_id\" : \"6277bffd-f884-4c5c-9825-ac41136f1b69\" , \"source\" : \"en\" , \"target\" : \"fr\" , \"base_model_id\" : \"43745eda-7fde-4998-a62a-26cf0e795973\" , \"domain\" : \"general\" , \"customizable\" : false , \"default_model\" : false , \"owner\" : \"1e5f399b-605d-4e83-b07e-534da85b86a9\" , \"status\" : \"available\" , \"name\" : \"custom-english-to-french-2\" , \"training_log\" : null } Translate text with your new custom model. To use your custom model, specify the text that you want to translate and the custom model's model ID in the Translate method. The following command translates text with the custom model identified by the model ID MODELID2 . curl -X POST --user \"apikey: $apikey \" --header \"Content-Type: application/json\" --data \"{\\\"text\\\":\\\"Hello, Lee Zhang. Please don't park in the alley.\\\",\\\"model_id\\\":\\\" $MODELID2 \\\"}\" \" $url /v3/translate?version=2018-05-01\" It returns { \"translations\" : [ { \"translation\" : \"Bonjour, Lijing Zhang. Veuillez ne pas vous garer dans l'\u80e1\u540c.\" } ], \"word_count\" : 13 , \"character_count\" : 49 } This time, both Lee Zhang and alley were translated in the way that you defined in the TMX file en-fr-ForcedGlossary.tmx . Note: the sentence was translated to Bonjour, Lee Zhang. Veuillez ne pas vous garer dans l'all\u00e9e. last time. Deleting a custom translation model. Don't run the command if you plan to use the custom model again . To delete a custom translation model, use the Delete model method. The following command deletes the translation model with the model ID $MODELID2 & $MODELID . curl -X DELETE --user \"apikey: $apikey \" \" $url /v3/models/ $MODELID ?version=2018-05-01\" curl -X DELETE --user \"apikey: $apikey \" \" $url /v3/models/ $MODELID2 ?version=2018-05-01\"","title":"Steps"},{"location":"watson-translator-101/parallel-corpus-model/#related-links","text":"There is lots of great information, tutorials, articles, etc on the IBM Developer site as well as broader web. Here are a subset of good examples related to data understanding, visualization and processing: Getting started with Language Translator IBM Cloud API Docs - Language Translator","title":"Related Links"},{"location":"watson-translator-101/parallel-corpus-model/#general-links","text":"IBM Developer","title":"General Links"},{"location":"watson-translator-101/translation-document/","text":"Translation Doocuments \u00b6 Objective \u00b6 IBM Watson\u2122 Language Translator allows you to translate text programmatically from one language into another language. Translate files from one language to another while preserving the original format. More than 12 different file formats can be translated, including MS Office, Open Office, and PDF. Make sure the document you want to translate meets the following Maximum file size requirements: 20 MB for service instances on Standard, Advanced, and Premium plans 2 MB for service instances on the Lite plan Tools Used \u00b6 Watson Language Translator Requirements \u00b6 IBM Cloud Account Steps \u00b6 To test drive Translator API, Go to the terminal window that you have configured in the previous section. The terminal window should have been ready for making API calls. If not, execute command export apikey = <your API key> export url = <your url> Submit a request to translate sample.pdf from English to Spanish. curl -X POST --user \"apikey: $apikey \" --form \"file=@sample.pdf\" --form \"source=en\" --form \"target=es\" \" $url /v3/documents?version=2018-05-01\" The command uses apikey for API access credential. It takes input file, source language and target language as parameters. It returns the following information including document-id . { \"document_id\" : \"e3b10684-83b0-457b-8c74-0774b41ff9e5\" , \"filename\" : \"sample.pdf\" , \"model_id\" : \"en-es\" , \"source\" : \"en\" , \"target\" : \"es\" , \"status\" : \"processing\" , \"created\" : \"2020-06-22T21:35:12Z\" } Record the document_id . export DOC_ID = <document_id> To translate a document with a custom model, use the model_id parameter instead. For example, the following request translates the document with the custom model identified by the model ID 96221b69-8e46-42e4-a3c1-808e17c787ca (which is NOT available for the workshop). curl -X POST --user \"apikey: $apikey \" --form \"file=@sample.pdf\" --form \"model_id=96221b69-8e46-42e4-a3c1-808e17c787ca\" \" $url /v3/documents?version=2018-05-01\" Note, you are going to create custom model in the next section. Check the translation status After you have submitted a document for translation, you can check the translation status to find out when the translated document is available to download. Replace the document ID e3b10684-83b0-457b-8c74-0774b41ff9e5 with yours. curl -X GET --user \"apikey: $apikey \" \" $url /v3/documents/ $DOC_ID ?version=2018-05-01\" The document tramslation of sample.pdf should take no time before it becomoes available. { \"document_id\" : \"e3b10684-83b0-457b-8c74-0774b41ff9e5\" , \"filename\" : \"sample.pdf\" , \"model_id\" : \"en-es\" , \"source\" : \"en\" , \"target\" : \"es\" , \"status\" : \"available\" , \"created\" : \"2020-06-22T21:35:12Z\" , \"completed\" : \"2020-06-22T21:35:15Z\" , \"word_count\" : 10 , \"character_count\" : 49 } Download the translated document. The following example request saves the translated document with document ID $DOC_ID to the file sample-es.pdf . curl -X GET --user \"apikey: $apikey \" --output \"sample-es.pdf\" \" $url /v3/documents/ $DOC_ID /translated_document?version=2018-05-01\" Review the translated document sample-es.pdf . It is downloaded to the current working folder. Delete documents. To delete the original submission of sample.pdf and its Spanish translation, execute the command below. Replace the e3b10684-83b0-457b-8c74-0774b41ff9e5 with your document ID. curl -X DELETE --user \"apikey: $apikey \" \" $url /v3/documents/ $DOC_ID ?version=2018-05-01\" Note: Original documents and any associated translated documents are deleted automatically after they have not been used for a certain period of time. Related Links \u00b6 There is lots of great information, tutorials, articles, etc on the IBM Developer site as well as broader web. Here are a subset of good examples related to data understanding, visualization and processing: Getting started with Language Translator IBM Cloud API Docs - Language Translator General Links \u00b6 IBM Developer","title":"Lab 3. Translate Document"},{"location":"watson-translator-101/translation-document/#translation-doocuments","text":"","title":"Translation Doocuments"},{"location":"watson-translator-101/translation-document/#objective","text":"IBM Watson\u2122 Language Translator allows you to translate text programmatically from one language into another language. Translate files from one language to another while preserving the original format. More than 12 different file formats can be translated, including MS Office, Open Office, and PDF. Make sure the document you want to translate meets the following Maximum file size requirements: 20 MB for service instances on Standard, Advanced, and Premium plans 2 MB for service instances on the Lite plan","title":"Objective"},{"location":"watson-translator-101/translation-document/#tools-used","text":"Watson Language Translator","title":"Tools Used"},{"location":"watson-translator-101/translation-document/#requirements","text":"IBM Cloud Account","title":"Requirements"},{"location":"watson-translator-101/translation-document/#steps","text":"To test drive Translator API, Go to the terminal window that you have configured in the previous section. The terminal window should have been ready for making API calls. If not, execute command export apikey = <your API key> export url = <your url> Submit a request to translate sample.pdf from English to Spanish. curl -X POST --user \"apikey: $apikey \" --form \"file=@sample.pdf\" --form \"source=en\" --form \"target=es\" \" $url /v3/documents?version=2018-05-01\" The command uses apikey for API access credential. It takes input file, source language and target language as parameters. It returns the following information including document-id . { \"document_id\" : \"e3b10684-83b0-457b-8c74-0774b41ff9e5\" , \"filename\" : \"sample.pdf\" , \"model_id\" : \"en-es\" , \"source\" : \"en\" , \"target\" : \"es\" , \"status\" : \"processing\" , \"created\" : \"2020-06-22T21:35:12Z\" } Record the document_id . export DOC_ID = <document_id> To translate a document with a custom model, use the model_id parameter instead. For example, the following request translates the document with the custom model identified by the model ID 96221b69-8e46-42e4-a3c1-808e17c787ca (which is NOT available for the workshop). curl -X POST --user \"apikey: $apikey \" --form \"file=@sample.pdf\" --form \"model_id=96221b69-8e46-42e4-a3c1-808e17c787ca\" \" $url /v3/documents?version=2018-05-01\" Note, you are going to create custom model in the next section. Check the translation status After you have submitted a document for translation, you can check the translation status to find out when the translated document is available to download. Replace the document ID e3b10684-83b0-457b-8c74-0774b41ff9e5 with yours. curl -X GET --user \"apikey: $apikey \" \" $url /v3/documents/ $DOC_ID ?version=2018-05-01\" The document tramslation of sample.pdf should take no time before it becomoes available. { \"document_id\" : \"e3b10684-83b0-457b-8c74-0774b41ff9e5\" , \"filename\" : \"sample.pdf\" , \"model_id\" : \"en-es\" , \"source\" : \"en\" , \"target\" : \"es\" , \"status\" : \"available\" , \"created\" : \"2020-06-22T21:35:12Z\" , \"completed\" : \"2020-06-22T21:35:15Z\" , \"word_count\" : 10 , \"character_count\" : 49 } Download the translated document. The following example request saves the translated document with document ID $DOC_ID to the file sample-es.pdf . curl -X GET --user \"apikey: $apikey \" --output \"sample-es.pdf\" \" $url /v3/documents/ $DOC_ID /translated_document?version=2018-05-01\" Review the translated document sample-es.pdf . It is downloaded to the current working folder. Delete documents. To delete the original submission of sample.pdf and its Spanish translation, execute the command below. Replace the e3b10684-83b0-457b-8c74-0774b41ff9e5 with your document ID. curl -X DELETE --user \"apikey: $apikey \" \" $url /v3/documents/ $DOC_ID ?version=2018-05-01\" Note: Original documents and any associated translated documents are deleted automatically after they have not been used for a certain period of time.","title":"Steps"},{"location":"watson-translator-101/translation-document/#related-links","text":"There is lots of great information, tutorials, articles, etc on the IBM Developer site as well as broader web. Here are a subset of good examples related to data understanding, visualization and processing: Getting started with Language Translator IBM Cloud API Docs - Language Translator","title":"Related Links"},{"location":"watson-translator-101/translation-document/#general-links","text":"IBM Developer","title":"General Links"},{"location":"watson-translator-101/translation/","text":"Translation API Test Drive \u00b6 Objective \u00b6 IBM Watson\u2122 Language Translator allows you to translate text programmatically from one language into another language. You call Translator API to translate sample text in this section. Tools Used \u00b6 Watson Language Translator Requirements \u00b6 IBM Cloud Account Steps \u00b6 To test drive Translator API, Go to the terminal window that you have configured in the previous section. The terminal window should have been ready for making API calls. If not, execute command export apikey = <your API key> export url = <your url> Translate Hello, world! to Spanish by calling Translator API. curl -X POST -u \"apikey: $apikey \" --header \"Content-Type: application/json\" --data \"{\\\"text\\\": [\\\"Hello, world! \\\", \\\"How are you?\\\"], \\\"model_id\\\":\\\"en-es\\\"}\" \" $url /v3/translate?version=2018-05-01\" The command uses apikey for API access credential. It returns the translation result in JSON format. It uses en-es translation model to translate Hello, World! and How are you? to Spanish. It returns { \"translations\" : [ { \"translation\" : \"\u00a1Hola, mundo! \" }, { \"translation\" : \"\u00bfC\u00f3mo est\u00e1s?\" } ], \"word_count\" : 5 , \"character_count\" : 26 } Translate Hello, world! to Chinese by calling Translator API. ```bash curl -X POST -u \"apikey: \\(apikey\" --header \"Content-Type: application/json\" --data \"{\\\"text\\\": [\\\"Hello, world! \\\", \\\"How are you?\\\"], \\\"model_id\\\":\\\"en-zh\\\"}\" \"\\) url/v3/translate?version=2018-05-01\" The command uses apikey for API access credential. It returns the translation result in JSON format. It uses en-zh translation model to translate Hello, World! and How are you? to Chinese. It returns { \"translations\" : [ { \"translation\" : \"\u4f60\u597d\u4e16\u754c \" }, { \"translation\" : \"\u4f60\u600e\u4e48\u6837\" } ], \"word_count\" : 5 , \"character_count\" : 26 } Optionally, translate Hello, world! to your prefered lanaguage. To retrieve a list of Translator model_id , curl --user apikey: $apikey \" $url /v3/models?version=2018-05-01\" Identify language of a text by calling Translator API. curl -X POST -u \"apikey: $apikey \" --header \"Content-Type: text/plain\" --data \"Language Translator translates text from one language to another\" \" $url /v3/identify?version=2018-05-01\" The command uses apikey for API access credential. It returns the translation result in PLAIN TEXT format. It identifies the language of text Language Translator translates text from one language to another . It returns a list of possible languages with different confidence. { \"languages\" : [ { \"language\" : \"en\" , \"confidence\" : 0.9999979447464287 }, ...... ] } Related Links \u00b6 There is lots of great information, tutorials, articles, etc on the IBM Developer site as well as broader web. Here are a subset of good examples related to data understanding, visualization and processing: Getting started with Language Translator IBM Cloud API Docs - Language Translator General Links \u00b6 IBM Developer","title":"Lab 2. Translation API Test Drive"},{"location":"watson-translator-101/translation/#translation-api-test-drive","text":"","title":"Translation API Test Drive"},{"location":"watson-translator-101/translation/#objective","text":"IBM Watson\u2122 Language Translator allows you to translate text programmatically from one language into another language. You call Translator API to translate sample text in this section.","title":"Objective"},{"location":"watson-translator-101/translation/#tools-used","text":"Watson Language Translator","title":"Tools Used"},{"location":"watson-translator-101/translation/#requirements","text":"IBM Cloud Account","title":"Requirements"},{"location":"watson-translator-101/translation/#steps","text":"To test drive Translator API, Go to the terminal window that you have configured in the previous section. The terminal window should have been ready for making API calls. If not, execute command export apikey = <your API key> export url = <your url> Translate Hello, world! to Spanish by calling Translator API. curl -X POST -u \"apikey: $apikey \" --header \"Content-Type: application/json\" --data \"{\\\"text\\\": [\\\"Hello, world! \\\", \\\"How are you?\\\"], \\\"model_id\\\":\\\"en-es\\\"}\" \" $url /v3/translate?version=2018-05-01\" The command uses apikey for API access credential. It returns the translation result in JSON format. It uses en-es translation model to translate Hello, World! and How are you? to Spanish. It returns { \"translations\" : [ { \"translation\" : \"\u00a1Hola, mundo! \" }, { \"translation\" : \"\u00bfC\u00f3mo est\u00e1s?\" } ], \"word_count\" : 5 , \"character_count\" : 26 } Translate Hello, world! to Chinese by calling Translator API. ```bash curl -X POST -u \"apikey: \\(apikey\" --header \"Content-Type: application/json\" --data \"{\\\"text\\\": [\\\"Hello, world! \\\", \\\"How are you?\\\"], \\\"model_id\\\":\\\"en-zh\\\"}\" \"\\) url/v3/translate?version=2018-05-01\" The command uses apikey for API access credential. It returns the translation result in JSON format. It uses en-zh translation model to translate Hello, World! and How are you? to Chinese. It returns { \"translations\" : [ { \"translation\" : \"\u4f60\u597d\u4e16\u754c \" }, { \"translation\" : \"\u4f60\u600e\u4e48\u6837\" } ], \"word_count\" : 5 , \"character_count\" : 26 } Optionally, translate Hello, world! to your prefered lanaguage. To retrieve a list of Translator model_id , curl --user apikey: $apikey \" $url /v3/models?version=2018-05-01\" Identify language of a text by calling Translator API. curl -X POST -u \"apikey: $apikey \" --header \"Content-Type: text/plain\" --data \"Language Translator translates text from one language to another\" \" $url /v3/identify?version=2018-05-01\" The command uses apikey for API access credential. It returns the translation result in PLAIN TEXT format. It identifies the language of text Language Translator translates text from one language to another . It returns a list of possible languages with different confidence. { \"languages\" : [ { \"language\" : \"en\" , \"confidence\" : 0.9999979447464287 }, ...... ] }","title":"Steps"},{"location":"watson-translator-101/translation/#related-links","text":"There is lots of great information, tutorials, articles, etc on the IBM Developer site as well as broader web. Here are a subset of good examples related to data understanding, visualization and processing: Getting started with Language Translator IBM Cloud API Docs - Language Translator","title":"Related Links"},{"location":"watson-translator-101/translation/#general-links","text":"IBM Developer","title":"General Links"}]}